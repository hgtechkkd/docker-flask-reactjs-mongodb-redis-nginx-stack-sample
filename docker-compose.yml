version: '2'

services:
    nginx: 
        restart: unless-stopped
        build:
            context: .
            dockerfile: ./docker/nginx/Dockerfile
        ports:
            - 80:80
        volumes:
            - ./docker/nginx/development:/etc/nginx/conf.d
        depends_on: 
            - backend
    backend:
        restart: unless-stopped
        build:
            context: .
            dockerfile: ./docker/backend/Dockerfile
        entrypoint: /app/docker/backend/wsgi-entrypoint.sh
        volumes:
            - .:/app
        ports:
            - 8000     
    db:
        image: mongo:latest
        hostname: mongodbserver
        environment:
          - HOME=/data/db
        volumes:
          - E:\docker\volume_backups\mongodb:/data/db
        ports:
          - "27017:27017"
    redis:
        image: 'bitnami/redis:latest'
        hostname: redisserver
        environment:
          - ALLOW_EMPTY_PASSWORD=yes
          - REDIS_PORT_NUMBER=7000
        volumes:
          - E:\docker\volume_backups\redis:/bitnami
        ports:
          - "7000:7000"
    s3server:
      build:
          context: .
          dockerfile: ./docker/services/s3/Dockerfile
      env_file:
            - services.env
      environment:
          - PYTHONUNBUFFERED=0
      # volumes:
      #     - E:\docker\volume_backups\s3:/data/files
    
    autoscanserver:
      build:
          context: .
          dockerfile: ./docker/services/autoscan/Dockerfile
      env_file:
            - services.env
      volumes:
          - E:\docker\volume_backups\nimbleocrfiles:/data/files
      environment:
          - PYTHONUNBUFFERED=0
    # s3fs:
    #   privileged: true
    #   image: efrecon/s3fs:1.90
    #   restart: unless-stopped
    #   env_file: s3server.env
    #   volumes:
    #     - E:\docker\volume_backups\s3data:/opt/s3fs/bucket:shared

    # s3fs-test:
    #   image: bash:latest
    #   restart: unless-stopped
    #   depends_on:
    #     - s3fs
    #   command: sleep infinity
    #   volumes:
    #     - E:\docker\volume_backups\s3data:/data:shared
volumes:
    static_volume: {}